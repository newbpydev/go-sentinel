class o{constructor(e){this.socket=null,this.reconnectAttempts=0,this.maxReconnectAttempts=5,this.reconnectDelay=1e3,this.maxReconnectDelay=3e4,this.connectHandlers=[],this.messageHandlers=[],this.disconnectHandlers=[],this.errorHandlers=[],this.url=e,this._connect()}_connect(){if(!this.url){console.error("WebSocket URL not provided");return}try{this.socket=new WebSocket(this.url),this.socket.onopen=e=>{this.reconnectAttempts=0,this.reconnectDelay=1e3,this.connectHandlers.forEach(t=>t(e)),this.onOpen&&this.onOpen()},this.socket.onmessage=e=>{try{const t=JSON.parse(e.data);this.messageHandlers.forEach(s=>s(t))}catch(t){console.error("Error parsing WebSocket message:",t),this.errorHandlers.forEach(s=>s(new ErrorEvent("error",{error:t,message:"Failed to parse message"})))}},this.socket.onclose=e=>{this.disconnectHandlers.forEach(t=>t(e)),e.wasClean||this._reconnect()},this.socket.onerror=e=>{console.error("WebSocket error:",e),this.errorHandlers.forEach(t=>t(e))}}catch(e){console.error("Error creating WebSocket connection:",e),this._reconnect()}}_reconnect(){if(this.reconnectAttempts>=this.maxReconnectAttempts){console.error("Max reconnection attempts reached");return}this.reconnectAttempts++;const e=Math.min(this.reconnectDelay*Math.pow(2,this.reconnectAttempts-1),this.maxReconnectDelay);console.log(`Reconnecting in ${e}ms (attempt ${this.reconnectAttempts}/${this.maxReconnectAttempts})`),setTimeout(()=>{this._connect()},e)}send(e){if(!this.socket||this.socket.readyState!==WebSocket.OPEN){console.error("WebSocket is not connected");return}try{const t=typeof e=="string"?e:JSON.stringify(e);this.socket.send(t)}catch(t){console.error("Error sending message:",t),this.errorHandlers.forEach(s=>s(new ErrorEvent("error",{error:t,message:"Failed to send message"})))}}onConnect(e){this.connectHandlers.push(e)}onMessage(e){this.messageHandlers.push(e)}onDisconnect(e){this.disconnectHandlers.push(e)}onError(e){this.errorHandlers.push(e)}disconnect(){this.socket&&(this.socket.close(1e3,"Client disconnected"),this.socket=null)}isConnected(){return this.socket!==null&&this.socket.readyState===WebSocket.OPEN}getState(){return this.socket?this.socket.readyState:WebSocket.CLOSED}}export{o as W};
//# sourceMappingURL=websocket.js.map
