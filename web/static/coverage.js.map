{"version":3,"file":"coverage.js","sources":["js/src/coverage.ts"],"sourcesContent":["/**\r\n * Coverage Visualization TypeScript\r\n * Handles interactive elements for the coverage visualization page\r\n */\r\n\r\n/**\r\n * Coverage data interface\r\n */\r\ninterface CoverageMetric {\r\n  total: number;\r\n  covered: number;\r\n  percentage: number;\r\n}\r\n\r\ninterface FileCoverage {\r\n  path: string;\r\n  name: string;\r\n  statements: CoverageMetric;\r\n  branches: CoverageMetric;\r\n  functions: CoverageMetric;\r\n  lines: CoverageMetric;\r\n  status: 'pass' | 'warning' | 'fail';\r\n}\r\n\r\ninterface CoverageUpdateEvent extends CustomEvent {\r\n  detail: {\r\n    data: {\r\n      files: FileCoverage[];\r\n      summary: {\r\n        statements: CoverageMetric;\r\n        branches: CoverageMetric;\r\n        functions: CoverageMetric;\r\n        lines: CoverageMetric;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\n// Global variables\r\nlet fileDetails: HTMLElement | null = null;\r\nlet closeDetailsBtn: HTMLElement | null = null;\r\nlet observer: MutationObserver | null = null;\r\n\r\n/**\r\n * Set width of metric fill bars based on data-percentage attributes\r\n */\r\nfunction setMetricFillWidths(): void {\r\n  document.querySelectorAll<HTMLElement>('.metric-fill[data-percentage]').forEach((el) => {\r\n    const percentage = el.getAttribute('data-percentage');\r\n    if (percentage) {\r\n      el.style.width = `${percentage}%`;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Helper function to format coverage percentage with appropriate color class\r\n * @param percentage - Coverage percentage (0-100)\r\n * @returns CSS class name based on coverage percentage\r\n */\r\nfunction getCoverageClass(percentage: number): string {\r\n  if (percentage >= 90) return 'high';\r\n  if (percentage >= 70) return 'medium';\r\n  if (percentage >= 50) return 'low';\r\n  return 'very-low';\r\n}\r\n\r\n/**\r\n * Navigate to a specific page in the coverage file list\r\n * @param page - Page number to navigate to\r\n * @param filter - Optional filter to apply\r\n * @param search - Optional search term\r\n */\r\nfunction goToPage(page: number, filter = 'all', search = ''): void {\r\n  if (window.htmx?.ajax) {\r\n    window.htmx.ajax('GET', `/api/coverage/files?page=${page}&filter=${filter}&search=${search}`, {\r\n      target: '#coverage-list',\r\n    });\r\n  }\r\n}\r\n\r\n// Expose functions to window for global access\r\n(window as any).setMetricFillWidths = setMetricFillWidths;\r\n(window as any).getCoverageClass = getCoverageClass;\r\n(window as any).goToPage = goToPage;\r\n(globalThis as any).setMetricFillWidths = setMetricFillWidths;\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  // Initial setup\r\n  setMetricFillWidths();\r\n\r\n  // Cache DOM elements\r\n  fileDetails = document.getElementById('file-details');\r\n  closeDetailsBtn = document.getElementById('close-details');\r\n\r\n  // Set up observer for dynamic content\r\n  observer = new MutationObserver((mutations) => {\r\n    for (const mutation of mutations) {\r\n      if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\r\n        setMetricFillWidths();\r\n      }\r\n    }\r\n  });\r\n\r\n  // Observe the coverage dashboard for changes\r\n  const dashboard = document.querySelector('.coverage-dashboard');\r\n  if (dashboard) {\r\n    observer.observe(dashboard, { childList: true, subtree: true });\r\n  }\r\n\r\n  // Function to show file details panel\r\n  window.showFileDetails = (filePath?: string): void => {\r\n    if (fileDetails) {\r\n      fileDetails.classList.add('active');\r\n      fileDetails.style.display = 'block';\r\n\r\n      if (filePath) {\r\n        // Load file details if file path is provided\r\n        loadFileDetails(filePath);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Close file details when close button is clicked\r\n  if (closeDetailsBtn && fileDetails) {\r\n    closeDetailsBtn.addEventListener('click', () => {\r\n      if (fileDetails) {\r\n        fileDetails.classList.remove('active');\r\n        fileDetails.style.display = 'none';\r\n      }\r\n    });\r\n  }\r\n\r\n  // Add keyboard navigation for file list\r\n  document.addEventListener('keydown', (event: KeyboardEvent) => {\r\n    // Only handle keys when file details are visible\r\n    if (fileDetails && fileDetails.style.display === 'block' && closeDetailsBtn) {\r\n      if (event.key === 'Escape') {\r\n        // Close details panel on Escape\r\n        closeDetailsBtn.click();\r\n      }\r\n    }\r\n  });\r\n\r\n  // Handle threshold filter changes\r\n  const thresholdFilter = document.getElementById('coverage-threshold') as HTMLSelectElement | null;\r\n  if (thresholdFilter) {\r\n    thresholdFilter.addEventListener('change', () => {\r\n      // HTMX will handle the actual request\r\n      // This is just for any additional UI updates\r\n      updateFilterIndicator(thresholdFilter.value);\r\n    });\r\n  }\r\n\r\n  // Handle the coverage filter\r\n  const filterInput = document.getElementById('coverage-filter') as HTMLInputElement;\r\n  if (filterInput) {\r\n    filterInput.addEventListener('input', function () {\r\n      const filterValue = filterInput.value.toLowerCase();\r\n\r\n      // Filter the file list\r\n      const fileRows = document.querySelectorAll('.file-row');\r\n      let visibleCount = 0;\r\n\r\n      fileRows.forEach(function (row) {\r\n        const filePath = row.getAttribute('data-path')?.toLowerCase() || '';\r\n        const fileName = row.getAttribute('data-name')?.toLowerCase() || '';\r\n\r\n        \r\n        if (filePath.includes(filterValue) || fileName.includes(filterValue)) {\r\n          (row as HTMLElement).style.display = '';\r\n          visibleCount++;\r\n        } else {\r\n          (row as HTMLElement).style.display = 'none';\r\n        }\r\n      });\r\n      \r\n      // Update filter indicator\r\n      updateFilterIndicator(filterValue);\r\n      \r\n      // Update visible count\r\n      const countEl = document.getElementById('visible-files-count');\r\n      if (countEl) {\r\n        countEl.textContent = visibleCount.toString();\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Load file details via AJAX\r\n   * @param filePath - Path of the file to load details for\r\n   */\r\n  function loadFileDetails(filePath: string): void {\r\n    if (!window.htmx?.ajax || !fileDetails) return;\r\n\r\n    // Show loading state\r\n    fileDetails.innerHTML = '<div class=\"loading\">Loading file details...</div>';\r\n\r\n    // Load file details via HTMX\r\n    window.htmx.ajax('GET', `/api/coverage/files/${encodeURIComponent(filePath)}`, {\r\n      target: '#file-details',\r\n      swap: 'innerHTML'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update metric display in the UI\r\n   * @param elementId - ID of the element to update\r\n   * @param metric - Metric object with coverage data\r\n   */\r\n  function updateMetricDisplay(elementId: string, metric: CoverageMetric): void {\r\n    const element = document.getElementById(elementId);\r\n    if (!element) return;\r\n    \r\n    const percentageEl = element.querySelector('.metric-percentage');\r\n    const fillEl = element.querySelector('.metric-fill');\r\n    const ratioEl = element.querySelector('.metric-ratio');\r\n    \r\n    if (percentageEl) {\r\n      percentageEl.textContent = metric.percentage.toFixed(2) + '%';\r\n    }\r\n    \r\n    if (fillEl) {\r\n      (fillEl as HTMLElement).style.width = metric.percentage + '%';\r\n      fillEl.className = 'metric-fill ' + getCoverageClass(metric.percentage);\r\n    }\r\n    \r\n    if (ratioEl) {\r\n      ratioEl.textContent = `${metric.covered}/${metric.total}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function to update any UI indicators for active filters\r\n   * @param filterValue - Current filter value\r\n   */\r\n  function updateFilterIndicator(filterValue: string): void {\r\n    const indicator = document.getElementById('filter-indicator');\r\n    if (indicator) {\r\n      indicator.style.display = filterValue ? 'inline-block' : 'none';\r\n    }\r\n  }\r\n\r\n  // Register for WebSocket events if available\r\n  if (typeof (window as any).htmx !== 'undefined' && (window as any).htmx.createWebSocket) {\r\n    document.body.addEventListener('coverage-updated', function(event: Event) {\r\n      // Refresh coverage data when notified of updates\r\n      const coverageEvent = event as CoverageUpdateEvent;\r\n      if (coverageEvent.detail && coverageEvent.detail.data) {\r\n        const data = coverageEvent.detail.data;\r\n        \r\n        // Update summary metrics\r\n        updateMetricDisplay('summary-statements', data.summary.statements);\r\n        updateMetricDisplay('summary-branches', data.summary.branches);\r\n        updateMetricDisplay('summary-functions', data.summary.functions);\r\n        updateMetricDisplay('summary-lines', data.summary.lines);\r\n        \r\n        // Update file list\r\n        const fileListEl = document.getElementById('coverage-file-list');\r\n        \r\n        if (fileListEl && data.files) {\r\n          // Clear existing file list\r\n          fileListEl.innerHTML = '';\r\n          \r\n          // Add each file to the list\r\n          data.files.forEach(file => {\r\n            const rowEl = document.createElement('tr');\r\n            rowEl.className = `file-row ${file.status}`;\r\n            rowEl.setAttribute('data-path', file.path);\r\n            rowEl.setAttribute('data-name', file.name);\r\n            \r\n            rowEl.innerHTML = `\r\n              <td class=\"file-name\">${file.name}</td>\r\n              <td class=\"file-path\">${file.path}</td>\r\n              <td class=\"metric\">${file.statements.percentage.toFixed(2)}%</td>\r\n              <td class=\"metric\">${file.branches.percentage.toFixed(2)}%</td>\r\n              <td class=\"metric\">${file.functions.percentage.toFixed(2)}%</td>\r\n              <td class=\"metric\">${file.lines.percentage.toFixed(2)}%</td>\r\n            `;\r\n            \r\n            rowEl.addEventListener('click', () => {\r\n              (window as any).showFileDetails(file.path);\r\n            });\r\n            \r\n            fileListEl.appendChild(rowEl);\r\n          });\r\n          \r\n          // Update total file count\r\n          const countEl = document.getElementById('total-files-count');\r\n          if (countEl) {\r\n            countEl.textContent = data.files.length.toString();\r\n          }\r\n          \r\n          // Apply any active filter\r\n          const filterInput = document.getElementById('coverage-filter') as HTMLInputElement;\r\n          if (filterInput && filterInput.value) {\r\n            const event = new Event('input');\r\n            filterInput.dispatchEvent(event);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Pagination helper functions - will be fully implemented in future updates\r\n   * This is a placeholder for the pagination feature. The associated variables and\r\n   * functions are exported for documentation purposes and future development.\r\n   */\r\n  // Initialize pagination variables for future use\r\n  const currentPage = 1; // Current active page\r\n  \r\n  // Update pagination UI - placeholder for future implementation\r\n  function updatePagination(): void {\r\n    // This function will handle updating the pagination UI\r\n    // Implementation will be added in future updates\r\n    console.debug(`Using pagination: page ${currentPage}`);\r\n  }\r\n  \r\n  // Call initial pagination update\r\n  updatePagination();\r\n});\r\n\r\n// Handle threshold filter changes\r\nconst thresholdFilter = document.getElementById('coverage-threshold') as HTMLSelectElement | null;\r\nif (thresholdFilter) {\r\n  thresholdFilter.addEventListener('change', () => {\r\n    // HTMX will handle the actual request\r\n    // This is just for any additional UI updates\r\n    updateFilterIndicator(thresholdFilter.value);\r\n  });\r\n}\r\n\r\n// Handle the coverage filter\r\nconst filterInput = document.getElementById('coverage-filter') as HTMLInputElement;\r\nif (filterInput) {\r\n  filterInput.addEventListener('input', function () {\r\n    const filterValue = filterInput.value.toLowerCase();\r\n\r\n    // Filter the file list\r\n    const fileRows = document.querySelectorAll('.file-row');\r\n    let visibleCount = 0;\r\n\r\n    fileRows.forEach(function (row) {\r\n      const filePath = row.getAttribute('data-path')?.toLowerCase() || '';\r\n      const fileName = row.getAttribute('data-name')?.toLowerCase() || '';\r\n\r\n      \r\n      if (filePath.includes(filterValue) || fileName.includes(filterValue)) {\r\n        (row as HTMLElement).style.display = '';\r\n        visibleCount++;\r\n      } else {\r\n        (row as HTMLElement).style.display = 'none';\r\n      }\r\n    });\r\n    \r\n    // Update filter indicator\r\n    updateFilterIndicator(filterValue);\r\n    \r\n    // Update visible count\r\n    const countEl = document.getElementById('visible-files-count');\r\n    if (countEl) {\r\n      countEl.textContent = visibleCount.toString();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Load file details via AJAX\r\n * @param filePath - Path of the file to load details for\r\n */\r\nfunction loadFileDetails(filePath: string): void {\r\n  if (!window.htmx?.ajax || !fileDetails) return;\r\n\r\n  // Show loading state\r\n  fileDetails.innerHTML = '<div class=\"loading\">Loading file details...</div>';\r\n\r\n  // Load file details via HTMX\r\n  window.htmx.ajax('GET', `/api/coverage/files/${encodeURIComponent(filePath)}`, {\r\n    target: '#file-details',\r\n    swap: 'innerHTML'\r\n  });\r\n}\r\n\r\n/**\r\n * Update metric display in the UI\r\n * @param elementId - ID of the element to update\r\n * @param metric - Metric object with coverage data\r\n */\r\nfunction updateMetricDisplay(elementId: string, metric: CoverageMetric): void {\r\n  const element = document.getElementById(elementId);\r\n  if (!element) return;\r\n  \r\n  const percentageEl = element.querySelector('.metric-percentage');\r\n  const fillEl = element.querySelector('.metric-fill');\r\n  const ratioEl = element.querySelector('.metric-ratio');\r\n  \r\n  if (percentageEl) {\r\n    percentageEl.textContent = metric.percentage.toFixed(2) + '%';\r\n  }\r\n  \r\n  if (fillEl) {\r\n    (fillEl as HTMLElement).style.width = metric.percentage + '%';\r\n    fillEl.className = 'metric-fill ' + getCoverageClass(metric.percentage);\r\n  }\r\n  \r\n  if (ratioEl) {\r\n    ratioEl.textContent = `${metric.covered}/${metric.total}`;\r\n  }\r\n}\r\n\r\n/**\r\n * Function to update any UI indicators for active filters\r\n * @param filterValue - Current filter value\r\n */\r\nfunction updateFilterIndicator(filterValue: string): void {\r\n  const indicator = document.getElementById('filter-indicator');\r\n  if (indicator) {\r\n    indicator.style.display = filterValue ? 'inline-block' : 'none';\r\n  }\r\n}\r\n\r\n// Register for WebSocket events if available\r\nif (typeof (window as any).htmx !== 'undefined' && (window as any).htmx.createWebSocket) {\r\n  document.body.addEventListener('coverage-updated', function(event: Event) {\r\n    // Refresh coverage data when notified of updates\r\n    const coverageEvent = event as CoverageUpdateEvent;\r\n    if (coverageEvent.detail && coverageEvent.detail.data) {\r\n      const data = coverageEvent.detail.data;\r\n      \r\n      // Update summary metrics\r\n      updateMetricDisplay('summary-statements', data.summary.statements);\r\n      updateMetricDisplay('summary-branches', data.summary.branches);\r\n      updateMetricDisplay('summary-functions', data.summary.functions);\r\n      updateMetricDisplay('summary-lines', data.summary.lines);\r\n      \r\n      // Update file list\r\n      const fileListEl = document.getElementById('coverage-file-list');\r\n      \r\n      if (fileListEl && data.files) {\r\n        // Clear existing file list\r\n        fileListEl.innerHTML = '';\r\n        \r\n        // Add each file to the list\r\n        data.files.forEach(file => {\r\n          const rowEl = document.createElement('tr');\r\n          rowEl.className = `file-row ${file.status}`;\r\n          rowEl.setAttribute('data-path', file.path);\r\n          rowEl.setAttribute('data-name', file.name);\r\n          \r\n          rowEl.innerHTML = `\r\n            <td class=\"file-name\">${file.name}</td>\r\n            <td class=\"file-path\">${file.path}</td>\r\n            <td class=\"metric\">${file.statements.percentage.toFixed(2)}%</td>\r\n            <td class=\"metric\">${file.branches.percentage.toFixed(2)}%</td>\r\n            <td class=\"metric\">${file.functions.percentage.toFixed(2)}%</td>\r\n            <td class=\"metric\">${file.lines.percentage.toFixed(2)}%</td>\r\n          `;\r\n          \r\n          rowEl.addEventListener('click', () => {\r\n            (window as any).showFileDetails(file.path);\r\n          });\r\n          \r\n          fileListEl.appendChild(rowEl);\r\n        });\r\n        \r\n        // Update total file count\r\n        const countEl = document.getElementById('total-files-count');\r\n        if (countEl) {\r\n          countEl.textContent = data.files.length.toString();\r\n        }\r\n        \r\n        // Apply any active filter\r\n        const filterInput = document.getElementById('coverage-filter') as HTMLInputElement;\r\n        if (filterInput && filterInput.value) {\r\n          const event = new Event('input');\r\n          filterInput.dispatchEvent(event);\r\n        }\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n// Using the module-scoped goToPage function at the top of the file\r\n\r\n// Export types and functions for testing\r\nexport type { CoverageMetric, FileCoverage, CoverageUpdateEvent };\r\n\r\n// Export functions for testing\r\nexport { \r\n  loadFileDetails,\r\n  updateMetricDisplay,\r\n  updateFilterIndicator,\r\n  setMetricFillWidths,\r\n  getCoverageClass,\r\n  goToPage\r\n};\r\n"],"names":["fileDetails","closeDetailsBtn","observer","setMetricFillWidths","el","percentage","getCoverageClass","goToPage","page","filter","search","_a","mutations","mutation","dashboard","filePath","loadFileDetails","event","thresholdFilter","updateFilterIndicator","filterInput","filterValue","fileRows","visibleCount","row","_b","fileName","countEl","updateMetricDisplay","elementId","metric","element","percentageEl","fillEl","ratioEl","indicator","coverageEvent","data","fileListEl","file","rowEl","currentPage","updatePagination"],"mappings":"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"}