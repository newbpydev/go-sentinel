{"version":3,"file":"main.js","sources":["js/src/main.ts"],"sourcesContent":["/**\r\n * Go Sentinel Web Interface\r\n * Main TypeScript file\r\n */\r\n\r\nimport WebSocketClient from './websocket';\r\nimport { showToast } from './toast';\r\n\r\n// Create a singleton webSocketClient instance\r\nconst webSocketClient = new WebSocketClient();\r\n\r\n/**\r\n * Initialize WebSocket connection\r\n * @param url - The WebSocket URL to connect to\r\n */\r\nfunction initWebSocket(url: string): void {\r\n  webSocketClient.connect(url);\r\n}\r\n\r\n/**\r\n * Test item interface\r\n */\r\ninterface TestItem {\r\n  id: string;\r\n  name: string;\r\n  status: 'pass' | 'fail' | 'running' | 'pending';\r\n  duration?: number;\r\n  errorMessage?: string;\r\n  selected?: boolean;\r\n}\r\n\r\n/**\r\n * Selection state interface\r\n */\r\ninterface SelectionState {\r\n  active: boolean;\r\n  selected: Set<string>;\r\n  lastIndex: number | null;\r\n}\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n  // Mobile menu toggle functionality\r\n  setupMobileMenu();\r\n  \r\n  // Test selection functionality with enhanced features\r\n  setupEnhancedTestSelection();\r\n  \r\n  // Initialize WebSocket connection\r\n  const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\r\n  const host = window.location.host;\r\n  const wsUrl = `${protocol}${host}/ws`;\r\n  \r\n  try {\r\n    initWebSocket(wsUrl);\r\n    \r\n    // Set up WebSocket connection status indicator\r\n    const statusIndicator = document.querySelector('.status-indicator');\r\n    if (statusIndicator) {\r\n      webSocketClient.on('open', () => {\r\n        statusIndicator.className = 'status-indicator connected';\r\n        statusIndicator.textContent = 'Connected';\r\n        showToast('Connected to WebSocket server', 'success');\r\n      });\r\n      \r\n      webSocketClient.on('close', () => {\r\n        statusIndicator.className = 'status-indicator disconnected';\r\n        statusIndicator.textContent = 'Disconnected';\r\n      });\r\n      \r\n      webSocketClient.on('error', (error?: Event) => {\r\n        console.error('WebSocket error:', error);\r\n        showToast('WebSocket connection error', 'error');\r\n      });\r\n    }\r\n  } catch (error) {\r\n    console.error('Failed to initialize WebSocket:', error);\r\n    showToast('Failed to connect to WebSocket server', 'error');\r\n  }\r\n});\r\n\r\n/**\r\n * Sets up mobile menu toggle for responsive design\r\n */\r\nfunction setupMobileMenu(): void {\r\n  const menuToggle = document.getElementById('mobile-menu-toggle');\r\n  const menu = document.getElementById('main-menu');\r\n  \r\n  if (!menuToggle || !menu) return;\r\n  \r\n  menuToggle.addEventListener('click', function() {\r\n    const isExpanded = menuToggle.getAttribute('aria-expanded') === 'true';\r\n    \r\n    // Toggle menu state\r\n    menuToggle.setAttribute('aria-expanded', (!isExpanded).toString());\r\n    menu.classList.toggle('show');\r\n    \r\n    // Update icon\r\n    const icon = menuToggle.querySelector('i');\r\n    if (icon) {\r\n      if (isExpanded) {\r\n        icon.className = 'icon-menu';\r\n        icon.setAttribute('aria-label', 'Open menu');\r\n      } else {\r\n        icon.className = 'icon-x';\r\n        icon.setAttribute('aria-label', 'Close menu');\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Close menu when clicking outside\r\n  document.addEventListener('click', function(event) {\r\n    const target = event.target as Node;\r\n    if (menu.classList.contains('show') && \r\n        !menu.contains(target) && \r\n        !menuToggle.contains(target)) {\r\n      menu.classList.remove('show');\r\n      menuToggle.setAttribute('aria-expanded', 'false');\r\n      \r\n      // Reset icon\r\n      const icon = menuToggle.querySelector('i');\r\n      if (icon) {\r\n        icon.className = 'icon-menu';\r\n        icon.setAttribute('aria-label', 'Open menu');\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Sets up enhanced test selection with clipboard and keyboard shortcuts\r\n */\r\nfunction setupEnhancedTestSelection(): void {\r\n  // Test selection state\r\n  const selectionState: SelectionState = {\r\n    active: false,\r\n    selected: new Set<string>(),\r\n    lastIndex: null\r\n  };\r\n  \r\n  const testList = document.getElementById('test-list');\r\n  const selectionModeIndicator = document.getElementById('selection-mode-indicator');\r\n  const selectionCount = document.getElementById('selection-count');\r\n  \r\n  if (!testList) return;\r\n  \r\n  // Get all test items from the DOM\r\n  function getTestItems(): HTMLElement[] {\r\n    if (!testList) return [];\r\n    return Array.from(testList.querySelectorAll('.test-item[data-id]'));\r\n  }\r\n  \r\n  // Get visible test items (considering any filters)\r\n  function getVisibleTestItems(): HTMLElement[] {\r\n    return getTestItems().filter(item => \r\n      item.style.display !== 'none' && \r\n      getComputedStyle(item).display !== 'none'\r\n    );\r\n  }\r\n  \r\n  // Get test item by ID - used internally for test selection operations\r\n  function getTestItemById(id: string): HTMLElement | null {\r\n    if (!testList) return null;\r\n    return testList.querySelector(`.test-item[data-id=\"${id}\"]`);\r\n  }\r\n  \r\n  // Get test item index in the visible items list\r\n  function getTestItemIndex(id: string): number {\r\n    // First try to get the element directly - more efficient for large lists\r\n    const item = getTestItemById(id);\r\n    if (!item) return -1;\r\n    \r\n    // If the item exists but might be filtered/hidden, find its position in visible items\r\n    const items = getVisibleTestItems();\r\n    return items.findIndex(visibleItem => visibleItem === item);\r\n  }\r\n  \r\n  // Update visual selection state\r\n  function updateSelectionVisuals(): void {\r\n    const items = getTestItems();\r\n    const selectedCount = selectionState.selected.size;\r\n    \r\n    items.forEach(item => {\r\n      const id = item.getAttribute('data-id') || '';\r\n      \r\n      if (selectionState.selected.has(id)) {\r\n        item.classList.add('selected');\r\n        item.setAttribute('aria-selected', 'true');\r\n      } else {\r\n        item.classList.remove('selected');\r\n        item.setAttribute('aria-selected', 'false');\r\n      }\r\n    });\r\n    \r\n    // Update count display\r\n    if (selectionCount) {\r\n      selectionCount.textContent = selectedCount.toString();\r\n      \r\n      if (selectedCount > 0) {\r\n        selectionCount.classList.add('has-selected');\r\n      } else {\r\n        selectionCount.classList.remove('has-selected');\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Toggle selection mode\r\n  function toggleSelectionMode(force?: boolean): void {\r\n    selectionState.active = force !== undefined ? force : !selectionState.active;\r\n    \r\n    if (selectionState.active) {\r\n      // Enter selection mode\r\n      document.body.classList.add('selection-mode');\r\n      if (selectionModeIndicator) {\r\n        selectionModeIndicator.textContent = 'Selection mode active';\r\n        selectionModeIndicator.style.display = 'block';\r\n      }\r\n    } else {\r\n      // Exit selection mode\r\n      document.body.classList.remove('selection-mode');\r\n      if (selectionModeIndicator) {\r\n        selectionModeIndicator.textContent = '';\r\n        selectionModeIndicator.style.display = 'none';\r\n      }\r\n      \r\n      // Clear selection when exiting\r\n      selectionState.selected.clear();\r\n    }\r\n    \r\n    updateSelectionVisuals();\r\n  }\r\n  \r\n  // Toggle test item selection\r\n  function toggleTestSelection(id: string, multiSelect = false, rangeSelect = false): void {\r\n    // If not in selection mode, enter it\r\n    if (!selectionState.active) {\r\n      toggleSelectionMode(true);\r\n    }\r\n    \r\n    // Get current index\r\n    const currentIndex = getTestItemIndex(id);\r\n    \r\n    if (rangeSelect && selectionState.lastIndex !== null) {\r\n      // Range selection: select all items between last selected and current\r\n      const items = getVisibleTestItems();\r\n      const start = Math.min(currentIndex, selectionState.lastIndex);\r\n      const end = Math.max(currentIndex, selectionState.lastIndex);\r\n      \r\n      for (let i = start; i <= end; i++) {\r\n        const item = items[i];\r\n        if (item) {\r\n          const itemId = item.getAttribute('data-id') || '';\r\n          selectionState.selected.add(itemId);\r\n        }\r\n      }\r\n    } else if (multiSelect) {\r\n      // Multi select: toggle this item's selection\r\n      if (selectionState.selected.has(id)) {\r\n        selectionState.selected.delete(id);\r\n      } else {\r\n        selectionState.selected.add(id);\r\n      }\r\n    } else {\r\n      // Single select: clear other selections and select this one\r\n      selectionState.selected.clear();\r\n      selectionState.selected.add(id);\r\n    }\r\n    \r\n    // Update last selected index\r\n    selectionState.lastIndex = currentIndex;\r\n    \r\n    // Update visuals\r\n    updateSelectionVisuals();\r\n  }\r\n  \r\n  // Select all visible test items\r\n  function selectAllVisibleTests(): void {\r\n    const items = getVisibleTestItems();\r\n    \r\n    if (selectionState.selected.size === items.length) {\r\n      // If all are selected, deselect all\r\n      selectionState.selected.clear();\r\n    } else {\r\n      // Otherwise select all\r\n      items.forEach(item => {\r\n        const id = item.getAttribute('data-id') || '';\r\n        selectionState.selected.add(id);\r\n      });\r\n    }\r\n    \r\n    updateSelectionVisuals();\r\n  }\r\n  \r\n  // Copy selected test IDs to clipboard\r\n  function copySelectedTestIds(): void {\r\n    if (selectionState.selected.size === 0) return;\r\n    \r\n    const selectedIds = Array.from(selectionState.selected).join('\\n');\r\n    \r\n    navigator.clipboard.writeText(selectedIds)\r\n      .then(() => {\r\n        showToast(`Copied ${selectionState.selected.size} test IDs to clipboard`, 'success');\r\n        \r\n        // Exit selection mode after copy\r\n        toggleSelectionMode(false);\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to copy to clipboard:', err);\r\n        showToast('Failed to copy to clipboard', 'error');\r\n      });\r\n  }\r\n  \r\n  // Copy all failing test IDs to clipboard\r\n  function copyAllFailingTests(): void {\r\n    if (!testList) {\r\n      showToast('Test list not found', 'error');\r\n      return;\r\n    }\r\n    \r\n    const failingTests = Array.from(testList.querySelectorAll('.test-item.fail[data-id]'));\r\n    \r\n    if (failingTests.length === 0) {\r\n      showToast('No failing tests to copy', 'info');\r\n      return;\r\n    }\r\n    \r\n    const testIds = failingTests.map(item => item.getAttribute('data-id')).filter(Boolean).join('\\n');\r\n    \r\n    navigator.clipboard.writeText(testIds)\r\n      .then(() => {\r\n        showToast(`Copied ${failingTests.length} failing test IDs to clipboard`, 'success');\r\n      })\r\n      .catch(err => {\r\n        console.error('Failed to copy to clipboard:', err);\r\n        showToast('Failed to copy to clipboard', 'error');\r\n      });\r\n  }\r\n  \r\n  // Setup event delegation for test items\r\n  testList?.addEventListener('click', function(event) {\r\n    const target = event.target as HTMLElement;\r\n    const testItem = target.closest('.test-item[data-id]') as HTMLElement;\r\n    \r\n    if (!testItem) return;\r\n    \r\n    const id = testItem.getAttribute('data-id') || '';\r\n    \r\n    if (selectionState.active || event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      // Handle selection\r\n      toggleTestSelection(\r\n        id, \r\n        event.ctrlKey || event.metaKey, // Multi-select with Ctrl/Cmd\r\n        event.shiftKey // Range select with Shift\r\n      );\r\n      event.preventDefault();\r\n    } else {\r\n      // Normal click - handle test details, run, etc.\r\n    }\r\n  });\r\n  \r\n  // Keyboard shortcuts\r\n  document.addEventListener('keydown', function(event) {\r\n    // Only handle keypresses when not in input elements\r\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes((event.target as HTMLElement).tagName)) {\r\n      return;\r\n    }\r\n    \r\n    // 'c' to enter/exit selection mode\r\n    if (event.key === 'c' && !event.ctrlKey && !event.metaKey && !event.altKey) {\r\n      toggleSelectionMode();\r\n      event.preventDefault();\r\n    }\r\n    \r\n    // Copy all failing tests with 'C' (shift+c)\r\n    if (event.key === 'C' && !event.ctrlKey && !event.metaKey && !event.altKey) {\r\n      copyAllFailingTests();\r\n      event.preventDefault();\r\n    }\r\n    \r\n    // Only handle the following shortcuts in selection mode\r\n    if (!selectionState.active) return;\r\n    \r\n    // 'a' to select/deselect all\r\n    if (event.key === 'a' && !event.ctrlKey && !event.metaKey) {\r\n      selectAllVisibleTests();\r\n      event.preventDefault();\r\n    }\r\n    \r\n    // 'Enter' to copy selected\r\n    if (event.key === 'Enter') {\r\n      copySelectedTestIds();\r\n      event.preventDefault();\r\n    }\r\n    \r\n    // 'Escape' to exit selection mode\r\n    if (event.key === 'Escape') {\r\n      toggleSelectionMode(false);\r\n      event.preventDefault();\r\n    }\r\n    \r\n    // Number keys 1-9 to select/deselect by index\r\n    if (event.key >= '1' && event.key <= '9') {\r\n      const index = parseInt(event.key) - 1;\r\n      const items = getVisibleTestItems();\r\n      \r\n      if (index < items.length) {\r\n        const item = items[index];\r\n        if (item) {\r\n          const id = item.getAttribute('data-id') || '';\r\n          toggleTestSelection(id, event.ctrlKey || event.metaKey);\r\n          event.preventDefault();\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Add selection tool buttons if needed\r\n  const actionBar = document.querySelector('.test-actions');\r\n  if (actionBar) {\r\n    // Selection mode toggle button\r\n    const selectionBtn = document.createElement('button');\r\n    selectionBtn.className = 'btn btn-sm btn-outline';\r\n    selectionBtn.innerHTML = '<i class=\"icon-check-square\"></i> Select';\r\n    selectionBtn.setAttribute('title', 'Enter selection mode (c)');\r\n    selectionBtn.addEventListener('click', () => toggleSelectionMode(true));\r\n    \r\n    // Copy all failing tests button\r\n    const copyFailingBtn = document.createElement('button');\r\n    copyFailingBtn.className = 'btn btn-sm btn-outline';\r\n    copyFailingBtn.innerHTML = '<i class=\"icon-clipboard\"></i> Copy Failing';\r\n    copyFailingBtn.setAttribute('title', 'Copy all failing tests (C)');\r\n    copyFailingBtn.addEventListener('click', copyAllFailingTests);\r\n    \r\n    actionBar.appendChild(selectionBtn);\r\n    actionBar.appendChild(copyFailingBtn);\r\n  }\r\n}\r\n\r\n/**\r\n * Sets up a mock WebSocket connection for demonstration\r\n * This is kept for backward compatibility and testing\r\n * @hidden\r\n */\r\n// Function is kept for documentation purposes but exported to avoid lint errors\r\nexport function setupMockWebSocket(): void {\r\n  // Check if this is a demo environment\r\n  const isDemo = window.location.search.includes('demo=true');\r\n  \r\n  if (!isDemo) return;\r\n  \r\n  console.log('Setting up mock WebSocket for demo environment');\r\n  \r\n  // Create a fake WebSocket\r\n  const mockWs = {\r\n    send: (message: string) => {\r\n      console.log('Mock WebSocket message sent:', message);\r\n    }\r\n  };\r\n  \r\n  // Replace the WebSocket object for demo purposes\r\n  (window as any).WebSocket = function() {\r\n    // Trigger connection immediately\r\n    setTimeout(() => {\r\n      if (webSocketClient.onOpen) webSocketClient.onOpen();\r\n      showToast('Connected to mock WebSocket server (DEMO MODE)', 'info');\r\n    }, 1000);\r\n    \r\n    return mockWs;\r\n  };\r\n}\r\n\r\n// Export interfaces for testing\r\nexport type { TestItem, SelectionState };\r\n"],"names":["webSocketClient","WebSocketClient","initWebSocket","url","setupMobileMenu","setupEnhancedTestSelection","protocol","host","wsUrl","statusIndicator","showToast","error","menuToggle","menu","isExpanded","icon","event","target","selectionState","testList","selectionModeIndicator","selectionCount","getTestItems","getVisibleTestItems","item","getTestItemById","id","getTestItemIndex","visibleItem","updateSelectionVisuals","items","selectedCount","toggleSelectionMode","force","toggleTestSelection","multiSelect","rangeSelect","currentIndex","start","end","i","itemId","selectAllVisibleTests","copySelectedTestIds","selectedIds","err","copyAllFailingTests","failingTests","testIds","testItem","index","actionBar","selectionBtn","copyFailingBtn"],"mappings":"kEASA,MAAMA,EAAkB,IAAIC,EAM5B,SAASC,EAAcC,EAAmB,CACxCH,EAAgB,QAAQG,CAAG,CAC7B,CAuBA,SAAS,iBAAiB,mBAAoB,UAAW,CAEvCC,EAAA,EAGWC,EAAA,EAG3B,MAAMC,EAAW,OAAO,SAAS,WAAa,SAAW,SAAW,QAC9DC,EAAO,OAAO,SAAS,KACvBC,EAAQ,GAAGF,CAAQ,GAAGC,CAAI,MAE5B,GAAA,CACFL,EAAcM,CAAK,EAGb,MAAAC,EAAkB,SAAS,cAAc,mBAAmB,EAC9DA,IACcT,EAAA,GAAG,OAAQ,IAAM,CAC/BS,EAAgB,UAAY,6BAC5BA,EAAgB,YAAc,YAC9BC,EAAU,gCAAiC,SAAS,CAAA,CACrD,EAEeV,EAAA,GAAG,QAAS,IAAM,CAChCS,EAAgB,UAAY,gCAC5BA,EAAgB,YAAc,cAAA,CAC/B,EAEeT,EAAA,GAAG,QAAUW,GAAkB,CACrC,QAAA,MAAM,mBAAoBA,CAAK,EACvCD,EAAU,6BAA8B,OAAO,CAAA,CAChD,SAEIC,EAAO,CACN,QAAA,MAAM,kCAAmCA,CAAK,EACtDD,EAAU,wCAAyC,OAAO,CAAA,CAE9D,CAAC,EAKD,SAASN,GAAwB,CACzB,MAAAQ,EAAa,SAAS,eAAe,oBAAoB,EACzDC,EAAO,SAAS,eAAe,WAAW,EAE5C,CAACD,GAAc,CAACC,IAETD,EAAA,iBAAiB,QAAS,UAAW,CAC9C,MAAME,EAAaF,EAAW,aAAa,eAAe,IAAM,OAGhEA,EAAW,aAAa,iBAAkB,CAACE,GAAY,UAAU,EAC5DD,EAAA,UAAU,OAAO,MAAM,EAGtB,MAAAE,EAAOH,EAAW,cAAc,GAAG,EACrCG,IACED,GACFC,EAAK,UAAY,YACZA,EAAA,aAAa,aAAc,WAAW,IAE3CA,EAAK,UAAY,SACZA,EAAA,aAAa,aAAc,YAAY,GAEhD,CACD,EAGQ,SAAA,iBAAiB,QAAS,SAASC,EAAO,CACjD,MAAMC,EAASD,EAAM,OACrB,GAAIH,EAAK,UAAU,SAAS,MAAM,GAC9B,CAACA,EAAK,SAASI,CAAM,GACrB,CAACL,EAAW,SAASK,CAAM,EAAG,CAC3BJ,EAAA,UAAU,OAAO,MAAM,EACjBD,EAAA,aAAa,gBAAiB,OAAO,EAG1C,MAAAG,EAAOH,EAAW,cAAc,GAAG,EACrCG,IACFA,EAAK,UAAY,YACZA,EAAA,aAAa,aAAc,WAAW,EAC7C,CACF,CACD,EACH,CAKA,SAASV,GAAmC,CAE1C,MAAMa,EAAiC,CACrC,OAAQ,GACR,aAAc,IACd,UAAW,IACb,EAEMC,EAAW,SAAS,eAAe,WAAW,EAC9CC,EAAyB,SAAS,eAAe,0BAA0B,EAC3EC,EAAiB,SAAS,eAAe,iBAAiB,EAEhE,GAAI,CAACF,EAAU,OAGf,SAASG,GAA8B,CACjC,OAACH,EACE,MAAM,KAAKA,EAAS,iBAAiB,qBAAqB,CAAC,EAD5C,CAAC,CAC2C,CAIpE,SAASI,GAAqC,CAC5C,OAAOD,EAAe,EAAA,OAAOE,GAC3BA,EAAK,MAAM,UAAY,QACvB,iBAAiBA,CAAI,EAAE,UAAY,MACrC,CAAA,CAIF,SAASC,EAAgBC,EAAgC,CACnD,OAACP,EACEA,EAAS,cAAc,uBAAuBO,CAAE,IAAI,EADrC,IACqC,CAI7D,SAASC,EAAiBD,EAAoB,CAEtC,MAAAF,EAAOC,EAAgBC,CAAE,EAC3B,OAACF,EAGSD,EAAoB,EACrB,UAAyBK,GAAAA,IAAgBJ,CAAI,EAJxC,EAIwC,CAI5D,SAASK,GAA+B,CACtC,MAAMC,EAAQR,EAAa,EACrBS,EAAgBb,EAAe,SAAS,KAE9CY,EAAM,QAAgBN,GAAA,CACpB,MAAME,EAAKF,EAAK,aAAa,SAAS,GAAK,GAEvCN,EAAe,SAAS,IAAIQ,CAAE,GAC3BF,EAAA,UAAU,IAAI,UAAU,EACxBA,EAAA,aAAa,gBAAiB,MAAM,IAEpCA,EAAA,UAAU,OAAO,UAAU,EAC3BA,EAAA,aAAa,gBAAiB,OAAO,EAC5C,CACD,EAGGH,IACaA,EAAA,YAAcU,EAAc,SAAS,EAEhDA,EAAgB,EACHV,EAAA,UAAU,IAAI,cAAc,EAE5BA,EAAA,UAAU,OAAO,cAAc,EAElD,CAIF,SAASW,EAAoBC,EAAuB,CAClDf,EAAe,OAASe,IAAU,OAAYA,EAAQ,CAACf,EAAe,OAElEA,EAAe,QAER,SAAA,KAAK,UAAU,IAAI,gBAAgB,EACxCE,IACFA,EAAuB,YAAc,wBACrCA,EAAuB,MAAM,QAAU,WAIhC,SAAA,KAAK,UAAU,OAAO,gBAAgB,EAC3CA,IACFA,EAAuB,YAAc,GACrCA,EAAuB,MAAM,QAAU,QAIzCF,EAAe,SAAS,MAAM,GAGTW,EAAA,CAAA,CAIzB,SAASK,EAAoBR,EAAYS,EAAc,GAAOC,EAAc,GAAa,CAElFlB,EAAe,QAClBc,EAAoB,EAAI,EAIpB,MAAAK,EAAeV,EAAiBD,CAAE,EAEpC,GAAAU,GAAelB,EAAe,YAAc,KAAM,CAEpD,MAAMY,EAAQP,EAAoB,EAC5Be,EAAQ,KAAK,IAAID,EAAcnB,EAAe,SAAS,EACvDqB,EAAM,KAAK,IAAIF,EAAcnB,EAAe,SAAS,EAE3D,QAASsB,EAAIF,EAAOE,GAAKD,EAAKC,IAAK,CAC3B,MAAAhB,EAAOM,EAAMU,CAAC,EACpB,GAAIhB,EAAM,CACR,MAAMiB,EAASjB,EAAK,aAAa,SAAS,GAAK,GAChCN,EAAA,SAAS,IAAIuB,CAAM,CAAA,CACpC,OAEON,EAELjB,EAAe,SAAS,IAAIQ,CAAE,EACjBR,EAAA,SAAS,OAAOQ,CAAE,EAElBR,EAAA,SAAS,IAAIQ,CAAE,GAIhCR,EAAe,SAAS,MAAM,EACfA,EAAA,SAAS,IAAIQ,CAAE,GAIhCR,EAAe,UAAYmB,EAGJR,EAAA,CAAA,CAIzB,SAASa,GAA8B,CACrC,MAAMZ,EAAQP,EAAoB,EAE9BL,EAAe,SAAS,OAASY,EAAM,OAEzCZ,EAAe,SAAS,MAAM,EAG9BY,EAAM,QAAgBN,GAAA,CACpB,MAAME,EAAKF,EAAK,aAAa,SAAS,GAAK,GAC5BN,EAAA,SAAS,IAAIQ,CAAE,CAAA,CAC/B,EAGoBG,EAAA,CAAA,CAIzB,SAASc,GAA4B,CAC/B,GAAAzB,EAAe,SAAS,OAAS,EAAG,OAExC,MAAM0B,EAAc,MAAM,KAAK1B,EAAe,QAAQ,EAAE,KAAK;AAAA,CAAI,EAEjE,UAAU,UAAU,UAAU0B,CAAW,EACtC,KAAK,IAAM,CACVlC,EAAU,UAAUQ,EAAe,SAAS,IAAI,yBAA0B,SAAS,EAGnFc,EAAoB,EAAK,CAAA,CAC1B,EACA,MAAaa,GAAA,CACJ,QAAA,MAAM,+BAAgCA,CAAG,EACjDnC,EAAU,8BAA+B,OAAO,CAAA,CACjD,CAAA,CAIL,SAASoC,GAA4B,CACnC,GAAI,CAAC3B,EAAU,CACbT,EAAU,sBAAuB,OAAO,EACxC,MAAA,CAGF,MAAMqC,EAAe,MAAM,KAAK5B,EAAS,iBAAiB,0BAA0B,CAAC,EAEjF,GAAA4B,EAAa,SAAW,EAAG,CAC7BrC,EAAU,2BAA4B,MAAM,EAC5C,MAAA,CAGF,MAAMsC,EAAUD,EAAa,IAAIvB,GAAQA,EAAK,aAAa,SAAS,CAAC,EAAE,OAAO,OAAO,EAAE,KAAK;AAAA,CAAI,EAEhG,UAAU,UAAU,UAAUwB,CAAO,EAClC,KAAK,IAAM,CACVtC,EAAU,UAAUqC,EAAa,MAAM,iCAAkC,SAAS,CAAA,CACnF,EACA,MAAaF,GAAA,CACJ,QAAA,MAAM,+BAAgCA,CAAG,EACjDnC,EAAU,8BAA+B,OAAO,CAAA,CACjD,CAAA,CAIKS,GAAA,MAAAA,EAAA,iBAAiB,QAAS,SAASH,EAAO,CAE5C,MAAAiC,EADSjC,EAAM,OACG,QAAQ,qBAAqB,EAErD,GAAI,CAACiC,EAAU,OAEf,MAAMvB,EAAKuB,EAAS,aAAa,SAAS,GAAK,IAE3C/B,EAAe,QAAUF,EAAM,SAAWA,EAAM,SAAWA,EAAM,YAEnEkB,EACER,EACAV,EAAM,SAAWA,EAAM,QACvBA,EAAM,QACR,EACAA,EAAM,eAAe,EAGvB,GAIO,SAAA,iBAAiB,UAAW,SAASA,EAAO,CAE/C,GAAA,EAAC,QAAS,WAAY,QAAQ,EAAE,SAAUA,EAAM,OAAuB,OAAO,IAK9EA,EAAM,MAAQ,KAAO,CAACA,EAAM,SAAW,CAACA,EAAM,SAAW,CAACA,EAAM,SAC9CgB,EAAA,EACpBhB,EAAM,eAAe,GAInBA,EAAM,MAAQ,KAAO,CAACA,EAAM,SAAW,CAACA,EAAM,SAAW,CAACA,EAAM,SAC9C8B,EAAA,EACpB9B,EAAM,eAAe,GAInB,EAACE,EAAe,SAGhBF,EAAM,MAAQ,KAAO,CAACA,EAAM,SAAW,CAACA,EAAM,UAC1B0B,EAAA,EACtB1B,EAAM,eAAe,GAInBA,EAAM,MAAQ,UACI2B,EAAA,EACpB3B,EAAM,eAAe,GAInBA,EAAM,MAAQ,WAChBgB,EAAoB,EAAK,EACzBhB,EAAM,eAAe,GAInBA,EAAM,KAAO,KAAOA,EAAM,KAAO,MAAK,CACxC,MAAMkC,EAAQ,SAASlC,EAAM,GAAG,EAAI,EAC9Bc,EAAQP,EAAoB,EAE9B,GAAA2B,EAAQpB,EAAM,OAAQ,CAClB,MAAAN,EAAOM,EAAMoB,CAAK,EACxB,GAAI1B,EAAM,CACR,MAAME,EAAKF,EAAK,aAAa,SAAS,GAAK,GAC3CU,EAAoBR,EAAIV,EAAM,SAAWA,EAAM,OAAO,EACtDA,EAAM,eAAe,CAAA,CACvB,CACF,CACF,CACD,EAGK,MAAAmC,EAAY,SAAS,cAAc,eAAe,EACxD,GAAIA,EAAW,CAEP,MAAAC,EAAe,SAAS,cAAc,QAAQ,EACpDA,EAAa,UAAY,yBACzBA,EAAa,UAAY,2CACZA,EAAA,aAAa,QAAS,0BAA0B,EAC7DA,EAAa,iBAAiB,QAAS,IAAMpB,EAAoB,EAAI,CAAC,EAGhE,MAAAqB,EAAiB,SAAS,cAAc,QAAQ,EACtDA,EAAe,UAAY,yBAC3BA,EAAe,UAAY,8CACZA,EAAA,aAAa,QAAS,4BAA4B,EAClDA,EAAA,iBAAiB,QAASP,CAAmB,EAE5DK,EAAU,YAAYC,CAAY,EAClCD,EAAU,YAAYE,CAAc,CAAA,CAExC"}